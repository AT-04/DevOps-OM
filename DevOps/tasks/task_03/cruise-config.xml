<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="90">
  <server artifactsdir="artifacts" agentAutoRegisterKey="06c65dcd-2e44-41e8-b163-a6ebd5aa495c" commandRepositoryLocation="default" serverId="9bfd4ca5-b2a9-4a51-82db-e4072ab365ea" />
  <pipelines group="defaultGroup">
    <pipeline name="rest_api" labeltemplate="1.${COUNT}" isLocked="false">
      <materials>
        <git url="https://github.com/OvidioMiranda/tz-rest-api" />
      </materials>
      <stage name="commit">
        <jobs>
          <job name="assemble">
            <tasks>
              <exec command="./gradlew">
                <arg>assemble</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="unit_tests">
        <jobs>
          <job name="check">
            <tasks>
              <exec command="./gradlew">
                <arg>check</arg>
              </exec>
            </tasks>
            <tabs>
              <tab name="Reports" path="html-reports/test/index.html" />
            </tabs>
            <artifacts>
              <artifact src="build/test-results/test" dest="test-results" />
              <artifact src="build/reports/tests/test" dest="html-reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="CodeQuality">
        <jobs>
          <job name="Sonarqube">
            <tasks>
              <exec command="./gradlew">
                <arg>sonarqube</arg>
                <arg>-Dsonar.host.url=http://sonarqube:9000</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="package">
        <jobs>
          <job name="shadowJar">
            <tasks>
              <exec command="./gradlew">
                <arg>shadowJar</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="build/libs/*-all.jar" dest="tz" />
              <artifact src="example.yml" dest="tz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Ixplora" labeltemplate="1.${COUNT}" isLocked="false" template="Ixplora_template_1">
      <environmentvariables>
        <variable name="PORT">
          <value>3001</value>
        </variable>
        <variable name="ENVIRONMENT">
          <value>testing</value>
        </variable>
        <variable name="ENABLE_CORS">
          <value>true</value>
        </variable>
        <variable name="LOG_LEVEL">
          <value>error</value>
        </variable>
        <variable name="LOGS">
          <value>logs.log</value>
        </variable>
        <variable name="STG_MONGO_USER">
          <value>ixplora</value>
        </variable>
        <variable name="STG_MONGO_PASSWORD">
          <value>secretixplora</value>
        </variable>
        <variable name="STG_DB_HOST_IP">
          <value>localhost</value>
        </variable>
        <variable name="STG_MONGO_PORT">
          <value>27017</value>
        </variable>
        <variable name="STG_MONGO_DB_NAME">
          <value>ixplora</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git@10.28.128.22:ovidio.miranda/be-service-surveys.git" />
      </materials>
    </pipeline>
  </pipelines>
  <templates>
    <pipeline name="Ixplora_template_1">
      <stage name="Build">
        <jobs>
          <job name="Install-dependencies">
            <tasks>
              <exec command="npm">
                <arg>install</arg>
              </exec>
              <exec command="npm">
                <arg>run</arg>
                <arg>build-ubuntu</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Test">
        <jobs>
          <job name="Initial-Setup">
            <tasks>
              <exec command="cp">
                <arg>.env.example</arg>
                <arg>.env</arg>
                <runif status="passed" />
              </exec>
              <task>
                <pluginConfiguration id="script-executor" version="1" />
                <configuration>
                  <property>
                    <key>script</key>
                    <value>sed -i "s/{PORT}/$PORT/g" .env&#xD;
sed -i "s/{ENVIRONMENT}/$ENVIRONMENT/g" .env&#xD;
sed -i "s/{CORS}/$ENABLE_CORS/g" .env&#xD;
sed -i "s/{LOG_LEVEL}/$LOG_LEVEL/g" .env&#xD;
sed -i "s/{LOGS}/$LOGS/g" .env&#xD;
NODE_ENV=test</value>
                  </property>
                  <property>
                    <key>shtype</key>
                    <value>bash</value>
                  </property>
                </configuration>
                <runif status="passed" />
              </task>
            </tasks>
          </job>
          <job name="Run-Tests">
            <tasks>
              <exec command="npm">
                <arg>run</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
              <exec command="npm">
                <arg>run</arg>
                <arg>test_coverage</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="TestReport" path="test-reports/mochawesome.html" />
              <tab name="CoverageReport" path="test-report-coverage/index.html" />
            </tabs>
            <artifacts>
              <artifact src="mochawesome-report/*" dest="test-reports/" />
              <artifact src="coverage/*" dest="test-report-coverage/" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="Package">
        <jobs>
          <job name="Initial-Config">
            <tasks>
              <exec command="cp">
                <arg>package.json</arg>
                <arg>build/</arg>
              </exec>
              <exec command="cp">
                <arg>README.md</arg>
                <arg>build/</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>.service.info</arg>
                <arg>build/</arg>
                <runif status="passed" />
              </exec>
              <task>
                <pluginConfiguration id="script-executor" version="1" />
                <configuration>
                  <property>
                    <key>script</key>
                    <value>export VERSION=$(cat package.json | jq -r .version)</value>
                  </property>
                  <property>
                    <key>shtype</key>
                    <value>bash</value>
                  </property>
                </configuration>
                <runif status="passed" />
              </task>
              <task>
                <pluginConfiguration id="script-executor" version="1" />
                <configuration>
                  <property>
                    <key>script</key>
                    <value>sed -i "s/{BuildVersion}/$VERSION/g" build/.service.info</value>
                  </property>
                  <property>
                    <key>shtype</key>
                    <value>bash</value>
                  </property>
                </configuration>
                <runif status="passed" />
              </task>
              <task>
                <pluginConfiguration id="script-executor" version="1" />
                <configuration>
                  <property>
                    <key>script</key>
                    <value>sed -i "s/{PORT}/$PORT/g" .env&#xD;
sed -i "s/{ENVIRONMENT}/$ENVIRONMENT/g" .env&#xD;
sed -i "s/{CORS}/$ENABLE_CORS/g" .env&#xD;
sed -i "s/{LOG_LEVEL}/$LOG_LEVEL/g" .env&#xD;
sed -i "s/{LOGS}/$LOGS/g" .env&#xD;
sed -i "s/{MONGO_USERNAME}/$STG_MONGO_USER/g" .env&#xD;
sed -i "s/{MONGO_PASSWORD}/$STG_MONGO_PASSWORD/g" .env&#xD;
sed -i "s/{MONGO_IP}/$STG_DB_HOST_IP/g" .env&#xD;
sed -i "s/{MONGO_PORT}/$STG_MONGO_PORT/g" .env&#xD;
sed -i "s/{MONGO_DB_NAME}/$STG_MONGO_DB_NAME/g" .env&#xD;
sed -i "s/{CASSANDRA_USERNAME}/$STG_CASSANDRA_USER/g" .env&#xD;
sed -i "s/{CASSANDRA_PASSWORD}/$STG_CASSANDRA_PASSWORD/g" .env&#xD;
sed -i "s/{CASSANDRA_IP}/$STG_CASSANDRA_IP/g" .env&#xD;
sed -i "s/{CASSANDRA_PORT}/$STG_CASSANDRA_PORT/g" .env&#xD;
sed -i "s/{CASSANDRA_KEYSPACE}/$STG_CASSANDRA_KEYSPACE/g" .env&#xD;
sed -i "s/{SMTP_SERVER}/$STG_SMTP_SERVER/g" .env&#xD;
sed -i "s/{EMAIL}/$STG_EMAIL/g" .env&#xD;
sed -i "s/{EMAIL_PASSWORD}/$STG_EMAIL_PASSWORD/g" .env&#xD;
sed -i "s/{MOBILE_APP_URL}/$STG_MOBILE_APP_URL/g" .env&#xD;
sed -i "s/{CQRS_HOST}/$STG_CQRS_HOST/g" .env&#xD;
sed -i "s/{CQRS_ENABLE}/$CQRS_ENABLE/g" .env&#xD;
sed -i "s/{CQRS_NUMBER_WORKERS}/$CQRS_NUMBER_WORKERS/g" .env</value>
                  </property>
                  <property>
                    <key>shtype</key>
                    <value>bash</value>
                  </property>
                </configuration>
                <runif status="passed" />
              </task>
              <exec command="cp">
                <arg>.env</arg>
                <arg>build/</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
          <job name="Compressed-Project">
            <tasks>
              <task>
                <pluginConfiguration id="script-executor" version="1" />
                <configuration>
                  <property>
                    <key>script</key>
                    <value>tar -czvf be-service-surveys.tar.gz build/</value>
                  </property>
                  <property>
                    <key>shtype</key>
                    <value>bash</value>
                  </property>
                </configuration>
              </task>
            </tasks>
            <artifacts>
              <artifact src="be-service-surveys.tar.gz" dest="package/" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="CodeQuality">
        <jobs>
          <job name="sonarqube">
            <tasks>
              <exec command="/opt/sonar-scanner-3.0.3.778/bin/sonar-scanner">
                <arg>-Dsonar.projectKey=my:project</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </templates>
  <agents>
    <agent hostname="8abd7e8c0a93" ipaddress="172.18.0.3" uuid="0592e565-49eb-4ffc-92c2-70a55292fb76" isDisabled="true" />
    <agent hostname="0a80d0a2d9ee" ipaddress="172.18.0.2" uuid="6635f5b5-2720-48dd-92d3-41da2c7b4cd5" />
  </agents>
</cruise>